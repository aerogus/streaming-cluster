##
# Cluster de broadcast vidéo
##

version: '3.9'

networks:
  frontend:
  backend:

volumes:
  data1:
  data2:

services:

  # 2 sources
  # mires audio+vidéo générées par ffmpeg

  source1:
    build: ./source
    container_name: source1
    restart: always
    environment:
      - INGEST_IP=ingest1 # destination
    networks:
      backend:

  source2:
    build: ./source
    container_name: source2
    restart: always
    environment:
      - INGEST_IP=ingest2 # destination
    networks:
      backend:

  # 2 serveurs d'ingest d'un flux RTMP
  # encodent et alimentent les broadcastX ?

  ingest1:
    build: ./ingest
    container_name: ingest1
    restart: always
    networks:
      backend:
    ports:
      - 801:80
    volumes:
      - data1:/data

  ingest2:
    build: ./ingest
    container_name: ingest2
    restart: always
    networks:
      backend:
    ports:
      - 802:80
    volumes:
      - data2:/data

  # 2 serveurs de base de données
  # pour la persistance des comptes + chat + Q/R + QCM

  #db1:
  #  build: ./db
  #  container_name: db1
  #  restart: always
  #  networks:
  #    backend:

  #db2:
  #  build: ./db
  #  container_name: db2
  #  restart: always
  #  networks:
  #    backend:

  # 4 serveurs de broadcast d'un flux HLS
  # les fichiers sont générés à l'avance par les ingest?

  broadcast1:
    build: ./broadcast
    container_name: broadcast1
    restart: always
    networks:
      backend:
      frontend:
    environment:
      - DB_MASTER=db1
      - DB_SLAVE=db2
    volumes:
      - data1:/data1:ro
      - data2:/data2:ro

  broadcast2:
    build: ./broadcast
    container_name: broadcast2
    restart: always
    networks:
      backend:
      frontend:
    environment:
      - DB_MASTER=db1
      - DB_SLAVE=db2
    volumes:
      - data1:/data1:ro
      - data2:/data2:ro

  broadcast3:
    build: ./broadcast
    container_name: broadcast3
    restart: always
    networks:
      backend:
      frontend:
    environment:
      - DB_MASTER=db1
      - DB_SLAVE=db2
    volumes:
      - data1:/data1:ro
      - data2:/data2:ro

  broadcast4:
    build: ./broadcast
    container_name: broadcast4
    restart: always
    networks:
      backend:
      frontend:
    environment:
      - DB_MASTER=db1
      - DB_SLAVE=db2
    volumes:
      - data1:/data1:ro
      - data2:/data2:ro

   # 2 serveurs de loadbalancing Haproxy + Certif SSL ?

  lb1:
    build: ./lb
    container_name: lb1
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8080:80
      - 8443:443
    networks:
      frontend:

  lb2:
    build: ./lb
    container_name: lb2
    restart: always
    ports:
      - 8081:80
      - 8444:443
    networks:
      frontend:
