worker_processes auto;

rtmp_auto_push on;

events {}

rtmp {
    server {
        # port standard RTMP
        listen 1935;
        #listen [::]:1935 ipv6only=on;

        # Maximum chunk size for stream multiplexing
        # Default is 4096.
        # The bigger this value the lower CPU overhead.
        # This value cannot be less than 128.
        chunk_size 4096;

        # tous les flux sources arrivent là, dans l'app "ingest"
        application ingest {
            live on;

            # 1) soit pas d'enregistrement
            #record off;

            ## 2) soit on enregistre tous les flux entrants
            record all; # audio + video
            ## veiller à ce que ce répertoire existe
            ## et soit inscriptible par nginx (user www-data)
            record_path /data/records;
            record_suffix -%Y%m%d-%H%M%S.flv;
            record_max_size 64M; # taille max d'un .flv

            ## ajout d'un suffixe timestamp au nom du fichier .flv enregistré
            ## mais c'est doublon avec record_suffix qui a un timestamp
            #record_unique on;

            # on n'autorise que ces ips à publier
            #allow publish 127.0.0.1;
            #deny publish all;

            # on autorise ou pas la lecture directe via rtmp
            #allow play all;
            allow play 127.0.0.1; # sauf pour le transcodage local
            #deny play all;

            # transcodage(s) vers l'app "broadcast"
            exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                -c:v libx264 -c:a aac -b:v  768k -b:a  96k -vf "scale=640:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_360
                -c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=854:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_480
                -c:v libx264 -c:a aac -b:v 2048k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_720
                -c copy -f flv rtmp://localhost/broadcast/$name_1080;

            # transcodage(s) vers l'app "broadcast"
            # exemple complet: upload en 1080, transcode en 1080 + 720 + 480 + 360 + 240 + 144
            #exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
            #     -c:v libx264 -c:a aac -b:v  128k -b:a  32k -vf "scale=256:trunc(ow/a/2)*2"  -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_144
            #     -c:v libx264 -c:a aac -b:v  256k -b:a  64k -vf "scale=426:trunc(ow/a/2)*2"  -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_240
            #     -c:v libx264 -c:a aac -b:v  768k -b:a  96k -vf "scale=640:trunc(ow/a/2)*2"  -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_360
            #     -c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=854:trunc(ow/a/2)*2"  -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_480
            #     -c:v libx264 -c:a aac -b:v 2048k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_720
            #     -c:v libx264 -c:a aac -b:v 3096k -b:a 128k -vf "scale=1920:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 10 -crf 23 -f flv rtmp://localhost/broadcast/$name_1080
            #     -c copy -f flv rtmp://localhost/broadcast/$name_src;
        }

        # l'app "broadcast" diffuse le flux hls
        application broadcast {
            live on; # Allows live input from above
            hls on; # Enable HTTP Live Streaming

            # Les .m3u8 et les .ts seront écrits ici
            # le répertoire doit exister et être inscriptible par nginx (user www-data)
            hls_path /data/hls;
            hls_fragment 3;
            hls_playlist_length 60;

            # On propose les versions transcodées suivant la bande passante du client
            # cas mini
            hls_variant _360 BANDWIDTH=864000;
            hls_variant _480 BANDWIDTH=1152000;
            hls_variant _720 BANDWIDTH=2176000;
            hls_variant _1080 BANDWIDTH=3200000;

            # cas complet
            #hls_variant _144  BANDWIDTH=160000;
            #hls_variant _240  BANDWIDTH=320000;
            #hls_variant _360  BANDWIDTH=864000;
            #hls_variant _480  BANDWIDTH=1152000;
            #hls_variant _720  BANDWIDTH=2176000;
            #hls_variant _1080 BANDWIDTH=3200000;
            #hls_variant _src  BANDWIDTH=4000000;
        }
    }
}

# HTTP can be used for accessing RTMP stats
http {

    types {
        text/html                     html;
        text/css                      css;
        image/gif                     gif;
        image/jpeg                    jpg;
        application/x-javascript      js;
        image/png                     png;
        image/x-icon                  ico;
        application/vnd.apple.mpegurl m3u8;
        video/mp2t                    ts;
    }

    server {
        listen 80 default_server;
        server_name _;

        # page de stats RTMP
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Refresh "3; $request_uri";
        }

        location /stat.xsl {
            root /etc/nginx/;
        }
    }
}
